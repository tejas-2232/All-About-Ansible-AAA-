--- 

- name: check if soiurce files exists
  ansible.builtin.stat:
    path: "{{ splunk_dir}}"
  delegate_to: localhost
  register: source_folders

- name: download source files from azure
  block:
    - name: print source files doesn't exist
      ansible.builtin.debug:
        msg: "Source files does not exist. Proceeding to downloading them."
    
    - name: download files 
      azure_rm_storageblob:
        resource_group: "{{ cf_resource_group }}"
        storage_account_name: "{{ storage_acc_name }}"
        container: "{{ container_name }}"
        blob: "{{ item }}"
        dest: "{{ splunk_source_folder_path }}/{{ item }}"
        subscription_id: "{{ subscriptionId }}"
      with_items: "{{ splunk_all_fixed_file_paths }}"
      register: downloading-file
      become: yes
      vars:
        ansible_sudo_pass: "{{ ansible_password }}"      

  rescue:
    - name: print error while downloading files
      ansible.builtin.debug:
        msg: "Error while downloading files. Error:\n {{ ansible_failed_result }}"
  delegate_to: localhost
  when:
    - not source_folders.stat.exists

- name: copy files from target server if does not exist
  copy:
    src: "{{ splunk_dir }}"
    dest: "{{ working_dir }}"
  become: yes
  vars:
    ansible_sudo_pass: "{{ ansible_password }}"

- name: check splunk status
  service:
    name: splunk
  register: service_info_splunk
  become: yes
  vars:
    ansible_sudo_pass: "{{ ansible_password }}"

- name: print splunk status when it is installed
  block:
    - debug:
        msg: "Splunk is already installed on server"
      when: ("'running' in service_info_splunk.status.Substate") or ("'exited' in service_info_splunk.status.Substate")
  when:
    - "'active' in service_info_splunk.status.ActiveState"
    - "'dead' not in service_info_splunk.status.Substate"

- name: installl splunk if that is not present 
  block:
    - name: Install splunk package
      yum:
        name: "{{ splunk_working_dir }}/{{ splunk_rpm }}"
        state: present
        disable_gpg_check: True
      become: yes
      vars:
        ansible_sudo_pass: "{{ ansible_password }}"

- name: splunk add-ons and configuration
  copy:
    src: "{{ splunk_working_dir }}/{{ splunk_conf_dir}}"
    dest: /opt/splunkforwarder/etc/apps
    remote_src: yes
  become: yes
  vars:
    ansible_sudo_pass: "{{ ansible_password }}"   

- name: Change file ownership, group and permissions
  file:
    path: "/opt/splunkforwarder/etc/apps/{{ splunk_conf_dir}}"
    owner: splunk
  become: yes
  vars:
    ansible_sudo_pass: "{{ ansible_password }}"

- name: install python3-pip
  yum:
    name: python3-pip
    state: present
  become: yes
  vars:
    ansible_sudo_pass: "{{ ansible_password }}"